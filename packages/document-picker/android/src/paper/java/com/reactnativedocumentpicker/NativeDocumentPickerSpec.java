
/**
 * This code was generated by [react-native-codegen](https://www.npmjs.com/package/react-native-codegen).
 *
 * Then it was commited. It is here to support the old architecture.
 * If you use the new architecture, this file won't be included and instead will be generated by the codegen.
 *
 * @generated by codegen project: GenerateModuleJavaSpec.js
 *
 * @nolint
 */

package com.reactnativedocumentpicker;

import com.facebook.proguard.annotations.DoNotStrip;
import com.facebook.react.bridge.Promise;
import com.facebook.react.bridge.ReactApplicationContext;
import com.facebook.react.bridge.ReactContextBaseJavaModule;
import com.facebook.react.bridge.ReactMethod;
import com.facebook.react.bridge.ReadableArray;
import com.facebook.react.bridge.ReadableMap;
import com.facebook.react.bridge.WritableMap;
import com.facebook.react.turbomodule.core.interfaces.TurboModule;
import javax.annotation.Nonnull;

public abstract class NativeDocumentPickerSpec extends ReactContextBaseJavaModule implements TurboModule {
  public static final String NAME = "RNDocumentPicker";

  public NativeDocumentPickerSpec(ReactApplicationContext reactContext) {
    super(reactContext);
  }

  @Override
  public @Nonnull String getName() {
    return NAME;
  }

  @ReactMethod
  @DoNotStrip
  public abstract void pick(ReadableMap options, Promise promise);

  @ReactMethod
  @DoNotStrip
  public abstract void saveDocument(ReadableMap options, Promise promise);

  @ReactMethod
  @DoNotStrip
  public abstract void writeDocuments(ReadableMap options, Promise promise);

  @ReactMethod
  @DoNotStrip
  public abstract void pickDirectory(ReadableMap options, Promise promise);

  @ReactMethod
  @DoNotStrip
  public abstract void keepLocalCopy(ReadableMap options, Promise promise);

  @ReactMethod(isBlockingSynchronousMethod = true)
  @DoNotStrip
  public abstract WritableMap isKnownType(String kind, String value);

  @ReactMethod
  @DoNotStrip
  public abstract void releaseSecureAccess(ReadableArray uris, Promise promise);

  @ReactMethod
  @DoNotStrip
  public abstract void releaseLongTermAccess(ReadableArray uris, Promise promise);
}
